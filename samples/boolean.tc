t ::= v | ( t ) | if t then t else t
v ::= true | false

; This is a comment 
!t if ( if true then false else true ) then false else true

; ... is a notion that you want to extend the semantics.
t ::= ... | t & t | t "|" t

; This should also test if left recurstion is a problem
; Also this would be a great place to test prefix rules.
!t if true & true | false | false | true then true else false

; big step judgement 
judgement t => t

; Special syntax for parsing judgements
!& true => true

; t steps to t
judgement t --> t

; Can have mulitble judegements
!& true => true
!& true --> true

; Judgements and context can hold variables.

!& t --> t1'
!t if t1 then t2 else t3
!& if true then t2 else t3 --> t2

; Our first inference rule

----------- (E-Paran)
( t ) --> t

; Does also accept premisses

t1 --> t1'
------------------------------ E-If
if t1 then t2 else t3 --> t1'

; Does also accept two formats 

t1 => false
t3 => v
--------------------------  (B-IfFalse)
if t1 then t2 else t3 => v 

 t1 => true      t2 => v
--------------------------  (B-IfTrue)
if t1 then t2 else t3 => v


